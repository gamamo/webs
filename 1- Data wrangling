
rm(list=ls())

library(rio)
library(plyr)
library(dplyr)
library(tidyr)
library(bipartite)
library(sp)
library(plotKML)
library(lcvplants)
library(taxize)
library(reshape2)
library(raster)
library(qdap)

# setwd
setwd("C:/Users/gabri/Dropbox/postdocINECOL/dadosCompilados/workingfolder_GM")

# import the main database #####
db = read.csv(file="Database_v1.csv", header=T)
colnames(db)[8:9] = c("longitude","latitude")

#read.files #####
setwd("C:/Users/gabri/Dropbox/postdocINECOL/dadosCompilados/webs_afterGMM")

file.list= list.files(pattern = c("*.csv"))
file.list2= list.files(pattern = c("*.xlsx"),full.names = F)
files = c(file.list,file.list2)

#get a list of files
data = sapply(files, import_list)

#count number of species of plants and birds and add some metrics ####
b = data # i am changing the name of the database here because it will be modifyed during the looping

Nspecies = list()

for (i in 1:length(b)){
  
  if(length(b[[i]])>1){
    
    Nspecies[[i]]=vector("list", length(b[[i]])) 
    for (z in 1:length(b[[i]])){
 
    Nspecies[[i]][[z]] = i
    Nspecies[[i]][[z]]["ID"] = names(b)[[i]] #  second-level "ID"
    Nspecies[[i]][[z]]["ID2"]=names(b[[i]][z])
    
    #put plants as rownames
    rownames(b[[i]][[z]]) = b[[i]][[z]][,1]
    b[[i]][[z]] = b[[i]][[z]][,-1]
    
    #calculate #of birds and #of plants
    nbirds = names(b[[i]][[z]]) # select the colunm names and exclude the first one (plant colunm)
    Nspecies[[i]][[z]]["birdspecies"] = as.numeric(length(nbirds))
    
    nplants = rownames(b[[i]][[z]])
    Nspecies[[i]][[z]]["plantspecies"] = as.numeric(length(nplants))       #length of the first colunm where plant names are)
    
    #calculate some metrics
    Nspecies[[i]][[z]]["connectance"] = networklevel(b[[i]][[z]],index = c("connectance"))
    Nspecies[[i]][[z]]["links per species"] = networklevel(b[[i]][[z]],index = c("links per species"))
    Nspecies[[i]][[z]]["nestedness"] = networklevel(b[[i]][[z]],index = c("nestedness"))
    
    }

    
  } else{ 
  
  Nspecies[[i]] = i    
  Nspecies[[i]]["ID"] = names(b)[i] #select the file name
  Nspecies[[i]]["ID2"] = NA # put NA in the second-level "ID"
  
  #put plants as rownames
  rownames(b[[i]][[1]]) = b[[i]][[1]][,1]
  b[[i]] = b[[i]][[1]][,-1]
  
  #calculate #of birds and #of plants
  nbirds = names(b[[i]]) # select the colunm names and exclude the first one (plant colunm)
  Nspecies[[i]]["birdspecies"] = length(nbirds)
    
  nplants = rownames(b[[i]])
  Nspecies[[i]]["plantspecies"] = length(nplants)         #length of the first colunm where plant names are
  
  #calculate some metrics
  Nspecies[[i]]["connectance"] = networklevel(b[[i]],index = c("connectance"))
  Nspecies[[i]]["links per species"] = networklevel(b[[i]],index = c("links per species"))
  Nspecies[[i]]["nestedness"] = networklevel(b[[i]],index = c("nestedness"))  
  
  }
}

print(Nspecies)

# convert the list into a data.frame
Nspecies_df = bind_rows(Nspecies) #unlist
  Nspecies_df = as.data.frame(Nspecies_df)
    Nspecies_df$ID_excelsheet = NA # create a link column to connect with the database
      Nspecies_df$ID_excelsheet = paste(Nspecies_df$ID, Nspecies_df$ID2, sep="_")
    
#eliminate files exension from the names
Nspecies_df$ID_excelsheet = gsub(".csv","",Nspecies_df$ID_excelsheet)
Nspecies_df$ID_excelsheet = gsub(".xlsx","",Nspecies_df$ID_excelsheet)
Nspecies_df$ID_excelsheet = gsub("afterGMM","",Nspecies_df$ID_excelsheet)
Nspecies_df$ID_excelsheet = gsub("afterGM","",Nspecies_df$ID_excelsheet)
Nspecies_df$ID_excelsheet = gsub("__","_",Nspecies_df$ID_excelsheet)

db$ID_excelsheet = gsub("afterGMM","",db$ID_excelsheet)
db$ID_excelsheet = gsub("afterGM","",db$ID_excelsheet)
db$ID_excelsheet = gsub("__","_",db$ID_excelsheet)

#link species number from Npsecies_df to the database

for (j in unique(Nspecies_df$ID_excelsheet)) {
  db[which(db$ID_excelsheet==j),"plant_sp"] = Nspecies_df[which(Nspecies_df$ID_excelsheet==j),"plantspecies"]
  db[which(db$ID_excelsheet==j),"birds_sp"] = Nspecies_df[which(Nspecies_df$ID_excelsheet==j),"birdspecies"]
  db[which(db$ID_excelsheet==j),"connectance"] = Nspecies_df[which(Nspecies_df$ID_excelsheet==j),"connectance"]
  db[which(db$ID_excelsheet==j),"links per species"] = Nspecies_df[which(Nspecies_df$ID_excelsheet==j),"links per species"]
  db[which(db$ID_excelsheet==j),"nestedness"] = Nspecies_df[which(Nspecies_df$ID_excelsheet==j),"nestedness"]
  
}
    
write.csv(db,"C:/Users/gabri/Dropbox/postdocINECOL/dadosCompilados/workingfolder_GM/database_output.csv",
          row.names = F)


#get plants and bird names ####

plant = list()
birds = list()

b = data

for (i in 1:length(b)){
  
  #to creat nested lists for those files with multiple sheets
  plant[[i]]=vector("list", length(b[[i]])) 
  birds[[i]]=vector("list", length(b[[i]])) 
  
  if(length(b[[i]])>1){
    for (z in 1:length(b[[i]])){
      
      #create 
      plant[[i]][[z]] = i
      plant[[i]][[z]]["ID"] = names(b)[[i]] 
      plant[[i]][[z]]["ID2"]=names(b[[i]][z]) #  second-level "ID"
      
      birds[[i]][[z]] = i
      birds[[i]][[z]]["ID"] = names(b)[[i]] 
      birds[[i]][[z]]["ID2"]=names(b[[i]][z]) #  second-level "ID"

      
      plant[[i]][[z]] = as.data.frame(
        cbind(b[[i]][[z]][,1],rep(names(b)[[i]],length(b[[i]][[z]][,1])),
                                                  rep(names(b[[i]][z]),length(b[[i]][[z]][,1])))
      )
        
      birds[[i]][[z]] = as.data.frame(
        cbind(colnames(b[[i]][[z]]),rep(names(b)[[i]],length(colnames(b[[i]][[z]]))),
                                                         rep(names(b[[i]][z]),length(colnames(b[[i]][[z]]))))
      )
                                                       
      colnames(plant[[i]][[z]]) = c("species","ID1","ID2")
      colnames(birds[[i]][[z]]) = c("species","ID1","ID2")
      
    }
    } else{
      plant[[i]] = as.data.frame(
        cbind(
        b[[i]][[1]][,1],rep(names(b)[[i]], length(b[[i]][[1]][,1])),
                            rep(NA, length(b[[i]][[1]][,1]))
        )
        )
      birds[[i]] = as.data.frame(
        cbind(colnames(b[[i]][[1]]),
                         rep(names(b)[[i]],length(colnames(b[[i]][[1]]))),
                         rep(NA,length(colnames(b[[i]][[1]])))
      )
      )
      colnames(plant[[i]]) = c("species","ID1","ID2")
      colnames(birds[[i]]) = c("species","ID1","ID2")
    }
  }
  print(plant)
  print(birds)

# harmonization birds ####  
  
  # import taxa from the birdtree.org, that latter will be used in the phylogenies
  birdtreetaxa = read.csv(file="C:/Users/gabri/Dropbox/postdocINECOL/dadosCompilados/workingfolder_GM/birdtaxa.csv")
  
  
  # set the bird life int as datasource
  out <- gnr_datasources()
  grep("Avi",gnr_datasources())
  bli = out$id[out$title=="BirdLife International"]
  
  # looping start
  birdharm = list()
  birdsyno = list()
  
  for (i in 1: length(birds)){
    
  if(class(birds[[i]])!="data.frame"){
    
    birdharm[[i]]=vector("list", length(birds[[i]]))
    birdsyno[[i]]=vector("list", length(birds[[i]]))
    
    for (z in 1:length(birds[[i]])) {
    
      dfb = as.data.frame(matrix(nrow = length(birds[[i]][[z]]$species[-1]), ncol=6))
      colnames(dfb) = c("submitted_name","matched_name","nomatch","notinBirdTree","ID1","ID2")
      
      # search for the sources to check the names in taxize GNR
      temp <- gnr_resolve(sci = c(birds[[i]][[z]]$species[-1]),best_match_only = T, canonical=T)
      
      # search for the names in birdlife
      temp2 = gnr_resolve(sci = c(temp$matched_name2),best_match_only = T, canonical=T, data_source_ids =bli,
                          fields = "all")
      n = length(temp2$submitted_name)
      dfb[1:n,1] = temp2$submitted_name
      dfb[1:n,2] = temp2$matched_name2
      
      # check which names did not match after check BLI
      nomatch = setdiff(temp$matched_name2,temp2$matched_name2)
      if(length(nomatch)==0){dfb[1:length(nomatch),3] = NA
      } else {dfb[1:length(nomatch),3] = nomatch}
      
      # check if names are not present in the BirdTree.org
      nomatchBT = setdiff(temp2$matched_name2,birdtreetaxa$Scientific)
      if(length(nomatchBT)==0){dfb[1:length(nomatchBT),4] = NA
      } else {dfb[1:length(nomatchBT),4] = nomatchBT}
      
      # check for the synonyms
      #synbirds = synonyms(sci = c(temp2$matched_name2), db="itis")
      #synbirds_df = synonyms_df(synbirds)
      
      birdharm[[i]][[z]] = dfb
      birdharm[[i]][[z]]["ID1"] = unique(birds[[i]][[z]]$ID1)
      birdharm[[i]][[z]]["ID2"] = unique(birds[[i]][[z]]$ID2)
      
      #birdsyno[[i]][[z]] = synbirds_df
      #birdsyno[[i]][[z]]["ID"] = unique(birds[[i]][[z]]$ID1)
      #birdsyno[[i]][[z]]["ID2"]= unique(birds[[i]][[z]]$ID2)
    }
  
  } else {
    
      dfb = as.data.frame(matrix(nrow = length(birds[[i]]$species[-1]), ncol=6))
      colnames(dfb) = c("submitted_name","matched_name","nomatch","notinBirdTree","ID1","ID2")
      
      # search for the sources to check the names in taxize GNR
      temp <- gnr_resolve(sci = c(birds[[i]]$species[-1]),best_match_only = T, canonical=T)
      
      # search for the names in birdlife
      temp2 = gnr_resolve(sci = c(temp$matched_name2),best_match_only = T, canonical=T, data_source_ids =bli,
                          fields = "all")
      n = length(temp2$submitted_name)
      dfb[1:n,1] = temp2$submitted_name
      dfb[1:n,2] = temp2$matched_name2
      
      # check which names did not match after check BLI
      nomatch = setdiff(temp$matched_name2,temp2$matched_name2)
      if(length(nomatch)==0){dfb[1:length(nomatch),3] = NA
      } else {dfb[1:length(nomatch),3] = nomatch}
      
      # check if names are not present in the BirdTree.org
      nomatchBT = setdiff(temp2$matched_name2,birdtreetaxa$Scientific)
      if(length(nomatchBT)==0){dfb[1:length(nomatchBT),4] = NA
      } else {dfb[1:length(nomatchBT),4] = nomatchBT}
      
      # check for the synonyms
      #synbirds = synonyms(sci = c(temp2$matched_name2), db="itis")
      #synbirds_df = synonyms_df(synbirds)
      
      
      birdharm[[i]] = dfb
      birdharm[[i]]["ID1"] = unique(birds[[i]]$ID1)
      birdharm[[i]]["ID2"] = unique(birds[[i]]$ID2)
      
      #birdsyno[[i]] = synbirds_df
      #birdsyno[[i]]["ID"] = unique(birds[[i]]$ID1)
      #birdsyno[[i]]["ID2"]= unique(birds[[i]]$ID2)
    
  }
  } # close of main loop
  #end

  # search for the species names that do not match and update them in the web list ####
  # the main source to match is the BirdLife Internacionall (http://datazone.birdlife.org/species/taxonomy),
  #as this is the base of the https://birdtree.org
  #this is done manually
  
  if(F){
  
  u=74
  birdharm[[u]]$nomatch
  birdharm[[u]]$notinBirdTree
  birds[[u]]
  
  sp =birdharm[[u]]$nomatch[25];sp
  gnr_resolve(sp)
  sapply(lapply(birds, function(ch) grep(sp, ch)), function(x) length(x)!=0)
  
  sp = birdharm[[u]]$notinBirdTree[9];sp
  sapply(lapply(birds, function(ch) grep(sp, ch)), function(x) length(x)!=0)
  
  
  u=132
  z=50
  birdharm[[u]][[z]]$nomatch
  birdharm[[u]][[z]]$notinBirdTree
  birds[[u]][[z]]
  
  
  sp =birdharm[[u]][[z]]$nomatch[1];sp
  sp = birdharm[[u]][[z]]$notinBirdTree[1];sp
  #sp = "Aratinga leucophthalmus"
  
  sapply(lapply(birds, function(ch) grep(sp, ch)), function(x) length(x)!=0)
  sp %in% taxaSemMatch
  sp %in% mammalsliz
  
  gnr_resolve(sp,data_source_ids = 187)
  synonyms(sp, db="itis")
  
  spnew = "Stigmatopelia chinensis"
  
  spnew %in% birdtreetaxa$Scientific
  #"Black-and-white-casqued hornbil" %in% birdtreetaxa$English

  a = lapply(birdharm, function(ch) grep(sp, ch))
  

  #looping for replacing species names 
  for(i in 1:length(a)){
    if (length(a[[i]])!=0){
    if(class(birds[[i]])!="data.frame"){
        for(z in 1:length(birds[[i]])){
          #birds[[i]][[z]]$species = gsub(" ","_",birds[[i]][[z]]$species)
          birds[[i]][[z]]$species = gsub("_"," ",birds[[i]][[z]]$species)
          birds[[i]][[z]][which(birds[[i]][[z]][[1]]==sp),1] = spnew
        }
    }else{
        birds[[i]]$species = gsub("_"," ",birds[[i]]$species)
        birds[[i]][which(birds[[i]][[1]]==sp),1] = spnew
    }
    }
  }
  
  sapply(lapply(birds, function(ch) grep(sp, ch)), function(x) length(x)!=0)

setwd("C:/Users/gabri/Dropbox/postdocINECOL/dadosCompilados/workingfolder_GM/bird harmonization")
 export_list(birds,"%s.xlsx")
 export(birds[[132]],"132b.xlsx")
  }
  
# harmonization plants ####
# search for the species names

  search_acc = list()
  
  for (i in 108:length(plant)){
      
      search_acc[[i]]=vector("list", length(plant[[i]])) #to creat nested lists for those files with multiple sheets
      
    if(class(plant[[i]])!="data.frame"){ # the idea here is to ask if I have a nested list (list) or a simple list with one single dataframe in it
      
      for (z in 1:length(plant[[i]])){ #because this is a nested list, I need to loop over the nested ones
        search = lcvp_fuzzy_search(plant[[i]][[z]]$species, max.distance = 2,bind_result = F,progress_bar = T)
        
        search_acc_temp = list()
         
      for (j in 1:length(search)){ # for each species I am looking for the status of accepted and then filling NAs for the names without match
          
        if(length(search[[j]])==1){ 
          search_acc_temp[[j]] = NA
        }else {
          temp = search[[j]][which(search[[j]]$Status=="accepted"),5]
          #this lopping is to extract accepted names if they exist. Otherwise, extract synonymys
          if(length(temp)==1){ 
            search_acc_temp[[j]] = temp
          }else{
            temp = search[[j]][which(search[[j]]$Status=="synonym"),5]
            if(length(temp)==1){ 
              search_acc_temp[[j]] = temp
            }else{
              search_acc_temp[[j]] = temp[1] # if there are two or more synonymys, pick the first
          }
        }
        }
      }
      #this part is to make a table with the orginal names and the names from the search   
      search_acc[[i]][[z]] = cbind(names(search),as.data.frame(ldply(search_acc_temp)))
      colnames(search_acc[[i]][[z]]) = c("dataName","resName")
      
      }   
      
      } else {
        
        search = lcvp_fuzzy_search(plant[[i]]$species, max.distance = 2,bind_result = F,progress_bar = T)
        search_acc_temp = list()
          
        for (j in 1:length(search)){
          
          #This looping is to put a NA in the names that cannot be found in the search
          if(length(search[[j]])==1){ 
            search_acc_temp[[j]] = NA
          }else {
              temp = search[[j]][which(search[[j]]$Status=="accepted"),5]
              #this lopping is to extract accepted names if they exist. Otherwise, extract synonymys
              if(length(temp)==1){ 
              search_acc_temp[[j]] = temp
              }else{
                temp2 = search[[j]][which(search[[j]]$Status=="synonym"),5]
                if(length(temp)==1){ 
                  search_acc_temp[[j]] = temp
                }else{
                search_acc_temp[[j]] = temp[1]  # if there are two or more synonymys, pick the first
            }
          }
        }  
        }
        #this part is to make a table with the orginal names and the names from the search
        search_acc[[i]] = cbind(names(search),as.data.frame(ldply(search_acc_temp)))
        colnames(search_acc[[i]]) = c("dataName","resName") 
      }
  } 
###################################################################
  

tempplant = search_acc # 1 a 108 # sem querer fiz overwrite. importar de novo
tempplant2 = search_acc # 108 a 129

export(tempplant,"tempplantnames.xlsx")
export_list(tempplant2,file = "%s.xlsx")


    
