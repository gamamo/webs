#rm(list=ls())

library(rio)
library(plyr)
library(dplyr)
library(tidyr)
library(bipartite)
library(sp)
library(plotKML)
library(lcvplants)
library(taxize)
library(reshape2)
library(raster)
library(qdap)

# script to match the traits with various databases #

#import final data long version

setwd("C:/Users/gabri/Dropbox/postdocINECOL/dadosCompilados/workingfolder_GM")
dl = read.csv(file="datalong_v29_mar_2022.csv")
colnames(dl)[1] = "Scientific"

oldnames = read.csv(file="temp_namestochange.csv")


# import trait databases
setwd("C:/Users/gabri/Dropbox/postdocINECOL/bird traits")

#Elton
elton = read.csv(file="BirdFuncDat.csv")
colnames(elton)
elton= elton[,c("Scientific","BodyMass.Value")]
elton$Scientific


#Atlantic
atlantic = read.csv(file="ATLANTIC_BIRD_TRAITS_Spp_Info.csv")
colnames(atlantic)
colnames(atlantic)[3] = "Scientific"
atlantic=atlantic[,c("Scientific","Body_mass.g.mean","Body_length.mm.mean","Wing_length.mm.mean",
                     "Tail_length.mm.mean","Tarsus_length.mm.mean","Bill_length.mm.mean",
                     "Bill_depth.mm.mean","Bill_width.mm.mean")]

#Ricklefs
ricklefs = read.csv(file="Ricklefs_afterGMM.csv")
ricklefs$Scientific = gsub("  "," ",ricklefs$Scientific)
ricklefs$Scientific =gsub("[[:digit:]]","",ricklefs$Scientific)
colnames(ricklefs)
ricklefs=ricklefs[,c("Length","Wing","Tail","Tarsus","Toe","Bill.L","Bill.W","Bill.D","Scientific")]

#Compilation
compilation = read.csv(file="traits_compilation.csv")
compilation = compilation[,-2]
compilation = compilation[,c("Scientific","Kipp.index","Kipp.distance","BillLength","BillWidth",
                             "BillU.MEAN","Bodymass","Weight.g.","WeightU.MEAN","GapeWidth.mm.",
                             "minclutch","maxclutch","WingLenght","LengthU.MEAN","WingU.MEAN",
                             "TailU.MEAN","TarsusU.MEAN")]
compilation$GapeWidth.mm.=as.numeric(compilation$GapeWidth.mm.)
compilation$maxclutch=as.numeric(compilation$maxclutch)
compilation$minclutch=as.numeric(compilation$minclutch)

comp=list()

for (i in unique(compilation$Scientific)){
  if(length(compilation[compilation$Scientific==i,1])>1){
    comp[[i]]=colMeans(compilation[compilation$Scientific==i,-1],na.rm = T)
  }
}

comp = ldply(comp)
colnames(comp)[1] = "Scientific"
head(comp)

#Sheard
sheard = read.csv("Sheard.csv")
colnames(sheard)[3] = "Scientific"
sheard = sheard[,c("Scientific","HWI")]


#Rombaut
romb = read.csv("Rombault_macro_allomdat_18_11_2018.csv")
colnames(romb) = c("Scientific","log_mass","log_beak_size")
romb = romb[,c(1,3)]
romb$Scientific = gsub("_"," ",romb$Scientific)

#MCfadden
mcf = read.csv("McFadden_afterGMM.csv")
colnames(mcf)[c(1,11,12,13)] = c("Scientific","Beak_Width_mcf","Beak_Depht_mcf","Gape_size_mcf")
mcf= mcf[,c(1,11,12,13)]

# import distribution data #
setwd("C:/Users/gabri/Dropbox/postdocINECOL/birds distribution")
dist = read.csv("birdlife_afterGM.csv")
colnames(dist)
dist=dist[,c("Scientific","RedListCat","Synonyms","S1","S2","S3")]

niche = read.csv(file="birds_ranges_niches.csv")


#import phylogeny data
setwd("C:/Users/gabri/Dropbox/postdocINECOL/bird phylogeny")
phy = read.csv("BLIOCPhyloMasterTax.csv")

# make a database of unique bird names from my datalong 

birdtraits = data.frame(Scientific=sort(unique(dl$Scientific)))

#create an colunm called "old", with the names of species that could still be in use in some of the
#datasets. If they do, them use this column as well for searching for the traits

oldnamesdist = dist[,c("Scientific","S1","S2","S3","Synonyms")]

birdtraits$old=NA
birdtraits$old2=NA

#make a colunm with the olds names
for (i in unique(oldnames$new)) {
  if(length(which(oldnames$new==i))>1 ){
    birdtraits[which(birdtraits$Scientific==i),"old"] = oldnames[which(oldnames$new==i)[1],"old"]
    birdtraits[which(birdtraits$Scientific==i),"old2"] = oldnames[which(oldnames$new==i)[2],"old"]
  }else{
  birdtraits[which(birdtraits$Scientific==i),"old"] = oldnames[which(oldnames$new==i),"old"]
  }
}


# match bird names with body mass from eltonian ####

birdtraits= left_join(birdtraits,elton,by="Scientific")
birdtraits= left_join(birdtraits,elton,by=c("old"="Scientific"))
birdtraits= left_join(birdtraits,elton,by=c("old2"="Scientific"))

a = which(!is.na(birdtraits$BodyMass.Value.y))
birdtraits$BodyMass.Value.x[a] = birdtraits$BodyMass.Value.y[a]
birdtraits=birdtraits[,-5]  
colnames(birdtraits)[4]  ="BodyMass"

# match with Atlantic birds ####
at = c(intersect(birdtraits$old,atlantic$Scientific))
at2 = c(intersect(birdtraits$old2,atlantic$Scientific))

birdtraits=left_join(birdtraits,atlantic,by="Scientific")

colnames(birdtraits)
colnames(atlantic)

for (i in at) {
    birdtraits[which(birdtraits$old==i),c(5:12)] = atlantic[which(atlantic$Scientific==i),2:9]
}
for (i in at2) {
  birdtraits[which(birdtraits$old2==i),c(5:12)] = atlantic[which(atlantic$Scientific==i),2:9]
}

colnames(birdtraits)


# match with Ricklefs ####
rt= c(intersect(birdtraits$old,ricklefs$Scientific))
rt2 = c(intersect(birdtraits$old2,ricklefs$Scientific))

birdtraits=left_join(birdtraits,ricklefs,by="Scientific")

colnames(birdtraits)
colnames(ricklefs)

#use the mean when the same species is found more than 1 time in ricklefs
for (i in rt) {
  if(length(which(ricklefs$Scientific==i))>1 ){
    temp=colMeans(as.data.frame(sapply(ricklefs[which(ricklefs$Scientific==i),1:8], as.numeric)))
    birdtraits[which(birdtraits$Scientific==i),c(13:20)] = temp
  }else{
  birdtraits[which(birdtraits$Scientific==i),c(13:20)] = ricklefs[which(ricklefs$Scientific==i),1:8]
  }
}

for (i in rt2) {
  if(length(which(ricklefs$Scientific==i))>1 ){
    temp=colMeans(as.data.frame(sapply(ricklefs[which(ricklefs$Scientific==i),1:8], as.numeric)))
    birdtraits[which(birdtraits$Scientific==i),c(13:20)] = temp
  }else{
    birdtraits[which(birdtraits$Scientific==i),c(13:20)] = ricklefs[which(ricklefs$Scientific==i),1:8]
  }
}


#create a colunm fir assing if the distribution is existent ####
birdtraits$dist=NA
birdtraits$IUCN=NA

dd = c(intersect(birdtraits$Scientific,dist$Scientific))
dt = c(intersect(birdtraits$old,dist$Scientific))
dt2 = c(intersect(birdtraits$old2,dist$Scientific)) 
ds = c(intersect(birdtraits$Scientific,dist$Synonyms))
ds1 = c(intersect(birdtraits$old,dist$Synonyms))
ds2 = c(intersect(birdtraits$old2,dist$Synonyms))

a = dist[which(birdtraits$Scientific %in% dist$Scientific),"Scientific"]
b = dist[which(birdtraits$old %in% dist$Scientific),"Scientific"]
c = dist[which(birdtraits$Scientific %in% dist$Synonyms),"Scientific"]
d = dist[which(birdtraits$Scientific %in% dist$Synonyms),"Scientific"]
e = dist[which(birdtraits$old %in% dist$Synonyms),"Scientific"]
f = dist[which(birdtraits$old2 %in% dist$Synonyms),"Scientific"]


for (i in dd) {
    birdtraits[which(birdtraits$Scientific==i),"dist"] = 1
    birdtraits[which(birdtraits$Scientific==i),"IUCN"] = dist[which(dist$Scientific==i),"RedListCat"]
} 
for (i in dt) {
  birdtraits[which(birdtraits$old==i),"dist"] = 1
  birdtraits[which(birdtraits$old==i),"IUCN"] = dist[which(dist$Scientific==i),"RedListCat"]
} 
for (i in dt2) {
  birdtraits[which(birdtraits$old2==i),"dist"] = 1
  birdtraits[which(birdtraits$old2==i),"IUCN"] = dist[which(dist$Scientific==i),"RedListCat"]
} 

for (i in ds) {
  birdtraits[which(birdtraits$Scientific==i),"dist"] = 1
  if(length(dist[which(dist$Synonyms==i),"RedListCat"])>1){
  birdtraits[which(birdtraits$Scientific==i),"IUCN"] = 
    paste(dist[which(dist$Synonyms==i),"RedListCat"][1],dist[which(dist$Synonyms==i),"RedListCat"][2],sep=";")
  } 
}
for (i in ds1) {
  birdtraits[which(birdtraits$old==i),"dist"] = 1
  birdtraits[which(birdtraits$old==i),"IUCN"] = dist[which(dist$Synonyms==i),"RedListCat"]
} 
for (i in ds2) {
  birdtraits[which(birdtraits$old2==i),"dist"] = 1
  birdtraits[which(birdtraits$old2==i),"IUCN"] = dist[which(dist$Synonyms==i),"RedListCat"]
} 


#match with phylogenies ####

birdtraits$phy=NA

pd = c(intersect(birdtraits$Scientific,phy$Scientific))
pt = c(intersect(birdtraits$old,phy$Scientific))
pt2 = c(intersect(birdtraits$old2,phy$Scientific))

for (i in pd) {
  birdtraits[which(birdtraits$Scientific==i),"phy"] = 1
}
for (i in pt) {
  birdtraits[which(birdtraits$old==i),"phy"] = 1
}
for (i in pt2) {
  birdtraits[which(birdtraits$old2==i),"phy"] = 1
}

# match with data compilation ####
ct= c(intersect(birdtraits$old,comp$Scientific))
ct2 =c(intersect(birdtraits$old2,comp$Scientific))

birdtraits=left_join(birdtraits,comp,by="Scientific")

colnames(birdtraits)
colnames(comp)

for (i in ct) {
    birdtraits[which(birdtraits$old==i),c(25:40)] = comp[which(comp$Scientific==i),2:17]
}
for (i in ct2) {
  birdtraits[which(birdtraits$old2==i),c(25:40)] = comp[which(comp$Scientific==i),2:17]
}

# match with sheard
st= c(intersect(birdtraits$old,sheard$Scientific))
st2 =c(intersect(birdtraits$old2,sheard$Scientific))

birdtraits=left_join(birdtraits,sheard,by="Scientific")

colnames(birdtraits)
colnames(sheard)

for (i in st) {
  birdtraits[which(birdtraits$old==i),c(41)] = sheard[which(sheard$Scientific==i),2]
}
for (i in st2) {
  birdtraits[which(birdtraits$old2==i),c(41)] = sheard[which(sheard$Scientific==i),2]
}


#match with Rombaut
rot= c(intersect(birdtraits$old,romb$Scientific))
rot2 =c(intersect(birdtraits$old2,romb$Scientific))

birdtraits=left_join(birdtraits,romb,by="Scientific")
colnames(birdtraits)
colnames(romb)

for (i in rot) {
  birdtraits[which(birdtraits$old==i),c(42)] = romb[which(romb$Scientific==i),2]
}
for (i in rot2) {
  birdtraits[which(birdtraits$old2==i),c(42)] = romb[which(romb$Scientific==i),2]
}
head(birdtraits)

#match with McFadden
mot= c(intersect(birdtraits$old,mcf$Scientific))
mot2 =c(intersect(birdtraits$old2,mcf$Scientific))


birdtraits=left_join(birdtraits,mcf,by="Scientific")
colnames(birdtraits)
colnames(mcf)

for (i in mot) {
  birdtraits[which(birdtraits$old==i),c(43:45)] = mcf[which(mcf$Scientific==i),2:4]
}
for (i in mot2) {
  birdtraits[which(birdtraits$old2==i),c(43:45)] = mcf[which(mcf$Scientific==i),2:4]
}

head(birdtraits)

# clean the database
birdtraits=birdtraits[which(!duplicated(birdtraits$Scientific)==T),]
colnames(birdtraits)
str(birdtraits)

# replace NAN by NA
birdtraits=data.frame(sapply(birdtraits, function(x) ifelse(is.nan(x), NA, x)))
colnames(birdtraits)
head(birdtraits)

#Change as.character by as. nuemeric
toNumeric = c(4:22,24:45)
birdtraits[ , toNumeric] <- apply(birdtraits[ , toNumeric], 2,
                    function(x) as.numeric(as.character(x)))
str(birdtraits)


#sum the traits
bm = grep("mass",colnames(birdtraits),ignore.case = T)
birdtraits[,bm]
birdtraits$Body_Mass = rowMeans(birdtraits[,bm],na.rm=T)
birdtraits=birdtraits[,-bm]


wr=grep("wing",colnames(birdtraits),ignore.case = T)
birdtraits[,wr]
birdtraits$WingLength=rowMeans(birdtraits[,wr],na.rm=T)
birdtraits=birdtraits[,-wr]

tr=grep("tars",colnames(birdtraits),ignore.case = T)
birdtraits[,tr]
birdtraits$Tarsus_final=rowMeans(birdtraits[,tr],na.rm=T)
birdtraits=birdtraits[,-tr]

tl=grep("tail",colnames(birdtraits),ignore.case = T)
birdtraits[,tl]
birdtraits$tail_final=rowMeans(birdtraits[,tl],na.rm=T)
birdtraits=birdtraits[,-tl]

br=grep("Bill.D",colnames(birdtraits),ignore.case = T)
birdtraits[,br]
birdtraits$BillDepth_final=rowMeans(birdtraits[,br],na.rm=T)
birdtraits=birdtraits[,-br]

bl=grep("Bill.L",colnames(birdtraits),ignore.case = T)
birdtraits[,bl]
birdtraits$BillLength_final=rowMeans(birdtraits[,bl],na.rm=T)
birdtraits=birdtraits[,-bl]

bw=grep("Bill.W",colnames(birdtraits),ignore.case = T)
birdtraits[,bw]
birdtraits$BillWidth_final=rowMeans(birdtraits[,bw],na.rm=T)
birdtraits=birdtraits[,-bw]

bw3 = grep("lW",colnames(birdtraits),ignore.case = T)
birdtraits[,bw3]
birdtraits$BillWidth_final=rowMeans(birdtraits[,bw3],na.rm=T)
birdtraits=birdtraits[,-bw3]

bol=grep("Length",colnames(birdtraits),ignore.case = T)
birdtraits[,bol]
bol=c(4,5,20) # only select body length
birdtraits$BodyLength_final=rowMeans(birdtraits[,bol],na.rm=T)
birdtraits=birdtraits[,-bol]

wg = grep("weight",colnames(birdtraits),ignore.case = T)
birdtraits[,wg]
birdtraits$weight_final=rowMeans(birdtraits[,wg],na.rm=T)
birdtraits=birdtraits[,-wg]


birdtraits$BillLength_final = rowMeans(birdtraits[,c("BillLength_final","BillU.MEAN")],na.rm=T)
birdtraits=birdtraits[,-25]

birdtraits$Body_Mass = rowMeans(birdtraits[,c("Body_Mass","weight_final")],na.rm=T)
birdtraits=birdtraits[,-25]

kd = grep("ipp",colnames(birdtraits),ignore.case = T)
birdtraits[,kd]

birdtraits=birdtraits[,!names(birdtraits) %in% c("weight_final")] # delete the colunm called "weight_final"

bw2 = grep("dep",colnames(birdtraits),ignore.case = T)
birdtraits[,bw2]
birdtraits$Beak_depth_final=rowMeans(birdtraits[,bw2],na.rm=T)
birdtraits=birdtraits[,-bw2]


#remove NaN again
for (i in 1:length(colnames(birdtraits))){
  if(class(birdtraits[,i])=="numeric"){
    birdtraits[which(is.nan(birdtraits[,i])),i] =NA
  }
}

# match with niches

nd1 = c(intersect(birdtraits$old,niche$Scientific))
nd2 = c(intersect(birdtraits$old2,niche$Scientific))

birdtraits=left_join(birdtraits,niche,by="Scientific")
colnames(birdtraits)
colnames(niche)

for (i in nd1) {
  birdtraits[which(birdtraits$old==i),c(24:29)] = niche[which(niche$Scientific==i),2:7]
}
for (i in nd2) {
  birdtraits[which(birdtraits$old2==i),c(24:29)] = niche[which(niche$Scientific==i),2:7]
}

head(birdtraits)

# export ####
#setwd("C:/Users/gabri/Dropbox/postdocINECOL/dadosCompilados/workingfolder_GM")
#write.csv(birdtraits,"birdtraits_v3_mar_2022.csv",row.names = F)

#characteristics of the current database

colnames(birdtraits)

i=birdtraits$NicheBreadth
100-length(which(is.na(i)))*100/length(i)

100-length()

100-length(which(is.na(birdtraits$Body_Mass)))*100/length(birdtraits$Body_Mass)
100-length(which(is.na(birdtraits$dist)))*100/length(birdtraits$dist)
100-length(which(is.na(birdtraits$phy)))*100/length(birdtraits$phy)


colnames(birdtraits)

# AVONET ####

setwd("C:/Users/gabri/Dropbox/postdocINECOL/dadosCompilados/workingfolder_GM")
dl = read.csv(file="datalong_v29_mar_2022.csv")
head(dl)
colnames(dl)[1] = "Scientific"

oldnames = read.csv(file="temp_namestochange.csv")


# import trait databases
setwd("C:/Users/gabri/Dropbox/postdocINECOL/bird traits")

avonet = read.csv("AVONET1_BirdLife.csv")
head(avonet)
colnames(avonet)[2] = "Scientific"

  
  birds_avonet = data.frame(Scientific=sort(unique(dl$Scientific)))

#create an colunm called "old", with the names of species that could still be in use in some of the
#datasets. If they do, them use this column as well for searching for the traits
  birds_avonet$old=NA
  birds_avonet$old2=NA
  oldnamesdist


#make a colunm with the olds names
for (i in unique(oldnames$new)) {
  if(length(which(oldnames$new==i))>1 ){
    birds_avonet[which(birds_avonet$Scientific==i),"old"] = oldnames[which(oldnames$new==i)[1],"old"]
    birds_avonet[which(birds_avonet$Scientific==i),"old2"] = oldnames[which(oldnames$new==i)[2],"old"]
  }else{
    birds_avonet[which(birds_avonet$Scientific==i),"old"] = oldnames[which(oldnames$new==i),"old"]
  }
}

head(birds_avonet)

ain= c(intersect(birds_avonet$old,avonet$Scientific))
ain2 =c(intersect(birds_avonet$old2,avonet$Scientific))

birds_avonet = left_join(birds_avonet,avonet,by="Scientific")

colnames(birds_avonet)
colnames(avonet)

for (i in ain) {
  birds_avonet[which(birds_avonet$old==i),c(13:39)] = avonet[which(avonet$Scientific==i),11:37]
}
for (i in ain2) {
  birds_avonet[which(birds_avonet$old2==i),c(13:39)] = avonet[which(avonet$Scientific==i),11:37]
}
head(birds_avonet)

#cambiarra para buscar sinonimos na base de dados de distancia

namesmissingavonet = list()
for (i in 1:length(birds_avonet[which(is.na(birds_avonet$Family1)),"Scientific"])){
  x=as.data.frame(which(oldnamesdist==birds_avonet[which(is.na(birds_avonet$Family1)),"Scientific"][i],arr.ind = TRUE))
  namesmissingavonet[[i]] = oldnamesdist[x$row,]
}

namesmissingavone = ldply(namesmissingavonet)

birds_avonet$old3=NA
birds_avonet$old4=NA

for(i in namesmissingavone$Synonyms){
  if(length(which(namesmissingavone$Synonyms==i))>1 ){
  birds_avonet[which(birds_avonet$Scientific==i),"old3"] = 
    namesmissingavone[which(namesmissingavone$Synonyms==i)[1],"Scientific"]
  birds_avonet[which(birds_avonet$Scientific==i),"old4"] = 
    namesmissingavone[which(namesmissingavone$Synonyms==i)[2],"Scientific"]
  }else{
    birds_avonet[which(birds_avonet$Scientific==i),"old3"] = 
      namesmissingavone[which(namesmissingavone$Synonyms==i),"Scientific"]
  }
}


ain3= c(intersect(birds_avonet$old3,avonet$Scientific))
ain4 =c(intersect(birds_avonet$old4,avonet$Scientific))

colnames(birds_avonet)
colnames(avonet)

for (i in ain3) {
  birds_avonet[which(birds_avonet$old3==i),c(5:39)] = avonet[which(avonet$Scientific==i),3:37]
}
for (i in ain4) {
  birds_avonet[which(birds_avonet$old4==i),c(5:39)] = avonet[which(avonet$Scientific==i),3:37]
}



# export ####
#setwd("C:/Users/gabri/Dropbox/postdocINECOL/dadosCompilados/workingfolder_GM")
#write.csv(birds_avonet,"birdtraitsAVONET_v27_feb_2022.csv",row.names = F)

# comparar avonet e outros traits
colnames(birdtraits)
colnames(birds_avonet)

intersect(birds_avonet$Scientific,birdtraits$Scientific)


tomatchAV= birds_avonet[,c("Scientific", "Family1","Order1","Beak.Length_Culmen","Beak.Length_Nares","Beak.Width",
          "Beak.Depth", "Tarsus.Length", "Wing.Length", "Kipps.Distance", "Hand.Wing.Index",
          "Tail.Length","Mass","Habitat","Trophic.Level","Trophic.Niche","Primary.Lifestyle")]
  tomatchAV= tomatchAV[order(tomatchAV$Scientific),]
  
tomatchBT= birdtraits[,c("Scientific","old","old2","Toe","Gape_size_mcf","NicheBreadth","NichePosition","IUCN","RangeSize_Cells","RangeSize_Meters","MidPoint_Long","MidPoint_Lat")]
  tomatchBT= tomatchBT[order(tomatchBT$Scientific),]

jointTraits = cbind(tomatchAV,tomatchBT)
colnames(jointTraits)
head(jointTraits)
jointTraits = jointTraits[,-which(duplicated(colnames(jointTraits)))] # eliminate duplicate columns

setwd("C:/Users/gabri/Dropbox/postdocINECOL/birds distribution")
realm = read.csv(file="realms_GM.csv")
head(realm)
realm = as.data.frame(realm)
realm = realm[,c("Scientific","Realm")]
realm[which(realm$Realm==""),"Realm"] = NA

jointTraits = left_join(jointTraits, realm, by="Scientific")



arin= c(intersect(jointTraits$old,realm$Scientific))

colnames(jointTraits)
colnames(realm)

for (i in arin) {
  jointTraits[which(jointTraits$old==i),"Realm"] = realm[which(realm$Scientific==i),"Realm"]
}



setwd("C:/Users/gabri/Dropbox/postdocINECOL/dadosCompilados/workingfolder_GM")
#sao os realms que eu arrumei na mao

editupdate = read.csv("tofillNA_done.csv")

for(i in unique(jointTraits[which(is.na(jointTraits$Realm)),"Scientific"])){
  if(length(editupdate[which(editupdate$Scientific==i),"Realm"])>0){
  jointTraits[which(jointTraits$Scientific==i),"Realm"] =
    editupdate[which(editupdate$Scientific==i),"Realm"]
  }
}


#eliminar uma especie maldita
jointTraits= jointTraits[-which(jointTraits$Scientific=="Treron calvus gibberifrons"),]

write.csv(jointTraits,"FullBirdtraits_v29_mar_2022.csv")



