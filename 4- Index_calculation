rm(list=ls())

library(bipartite)
library(reshape2)
library(tidygraph)
library(igraph)
library(netrankr)
library(stringr)
library(plyr)
library(dplyr)
library(correlation)
library(see)

#import final data long version

setwd("C:/Users/gabri/Dropbox/postdocINECOL/dadosCompilados/workingfolder_GM")
dir()
dl = read.csv(file="datalong_v29_mar_2022.csv")
head(dl)
colnames(dl)[1] = "Scientific"

dim(dl)

testdata=dl
head(testdata)
colnames(testdata)


# rodar a funcao Katz ####
katz<-function(A){
  #-----------------------------#
  #-Calculating Katz centrality-#
  #-----------------------------#
  A.eigen<-eigen(A)$values #Calculating eigenvalues
  A.maxeigen<-ifelse(is.complex(A.eigen), max(Re(A.eigen[which(Im(A.eigen)==0)])), max(A.eigen)) # Largest eigenvalue
  alfa <- 1/(A.maxeigen+0.1) #Calculating alfa
  Q<-alfa*A #Multiplying A matrix with alfa
  I<-diag(1, nrow=nrow(Q), ncol=ncol(Q)) #Getting the identity matrix of I
  katz<-solve(I-Q) #Obtaining analytical solution to Katz centrality
  katz_cent<-colSums(katz) #Calculating Katz centrality for each node
  return(katz_cent)
}

# Preparar a metarede ####
meta = testdata[,1:3]

meta=dcast(meta,plant_id~Scientific,value.var=c("interaction"),fun.aggregate = sum)

rownames(meta) = meta[,1]
meta= meta[,-1]

#binarizar a metarede
meta[meta>1] =1

#elminar as plantas sem associacao com ninguém. As aves ja foram tiradas no script 2
meta=meta[-which(rowSums(meta)==0),]

# eliminar as especies que só interagem entre si
pairs1int = list()
aves1int = c(names(which(colSums(meta)==1))) # aves que só interagem com uma planta

for (j in 1:length(aves1int)){
  p = which(meta[,aves1int[j]]==1) # achar a planta que a ave interage
  if(rowSums(meta[p,])==1){        # a planta interage com alguma outra ave no geral? se TRUE, sim
    pairs1int[[j]] = c(aves1int[j], rownames(meta[p,]))
  }
}

pairs1int = as.data.frame(ldply(pairs1int))

# ver que linhas as plantas e aves que interagem entre si estao e deletar
birds1int = which(colnames(meta)%in% pairs1int$V1 )
plant1int = which(rownames(meta)%in% pairs1int$V2 )

# deletar
meta = meta[-plant1int,-birds1int]

#calculate some network indexes
netindexes = networklevel(meta,index = c("links per species","web asymmetry","number of compartments","connectance",
                           "compartment diversity"))

###################################################################################################
# calcular as metricas de centralidade ####

net = meta
net <- as.matrix(net)

n_p = nrow(net);n_p  #informe o numero de linhas 
n_a = ncol(net);n_a  #informe o numero de colunas

# coloca ela em formato em quadrado

A <- rbind(cbind(matrix(0, n_p, n_p), net), cbind(t(net), matrix(0, n_a, n_a)))

#Function that calculates Katz centrality for a given adjacency matrix

katzz = katz(A)
katzz <- tail(katzz, -n_p) # aqui eu mudo o script orinal, colocando o -n_p, qdo no original era o valor de 6
bet = specieslevel(net, index="betweenness")$`higher level`[1]
clos = specieslevel(net, index="closeness")$`higher level`[1]
deg = specieslevel(net, index="degree")$`higher level`

result = data.frame(deg, bet, clos, katzz)
result2 = data.frame(deg, clos, katzz)

#### Calcular el PCA com betweeness
model<- prcomp(result, center=TRUE, scale=TRUE)
summaryPC = summary(model)
plot(model, col="blue")
biplot(model)
axes <- predict(model)
PCA = data.frame(axes)

resultadofinal = data.frame(result, PCA$PC1,PCA$PC2)
write.csv(resultadofinal, "centrality.csv")


#### Calcular el PCA sem betweeness
model2<- prcomp(result2, center=TRUE, scale=TRUE)
summary2PC = summary(model2)
plot(model2, col="blue")
biplot(model2)
axes2 <- predict(model2)
PCA2 = data.frame(axes2)
#attach(PCA)
#PC1 #el PC1 esta negativo... puedes volver a positivo multiplicando por -1 para ser mas intuitivo,
#donde los valores mas altos y positivos son mas centrales

resultadofinal2 = data.frame(result2, PCA2$PC1,PCA2$PC2)
write.csv(resultadofinal2, "centrality_nobet.csv")


# calcular o numero de redes em que uma especie participa ####
colnames(dl)

resul = list()
for (i in unique(dl$Scientific)){
  resul[[i]] = length(unique(dl[dl$Scientific==i,"database"]))
}

resul=ldply(resul)
colnames(resul) = c("Scientific","Nwebs")
resul[order(resul$Nwebs,decreasing = T),]

# match the meta-networks metrics with species traits table ####


centrality = read.csv(file="centrality.csv")
centrality2 = read.csv(file="centrality_nobet.csv")

colnames(centrality)[c(1,6,7)] = c("Scientific", "PC1","PC2")
colnames(centrality2)[c(1,5,6)] = c("Scientific", "PC1_nobet","PC2_nobet")
centrality2 = centrality2[,c(1,5,6)]

traits = read.csv(file="FullBirdtraits_v29_mar_2022.csv")
head(traits)

centrai = left_join(traits,centrality,by="Scientific") # results centrality
centrai = left_join(centrai,resul, by="Scientific") # results NNets
centrai = left_join(centrai,centrality2, by="Scientific")

head(centrai)
write.csv(centrai, "birdtraits_spmetrics_v29_mar_2022.csv")


