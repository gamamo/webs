#rm(list = ls())

# load packages
library(ggplot2)
library(nlme)
library(visreg)
library(lme4)
library(car)
library(MuMIn)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(dplyr)
library(plyr)
library(patchwork)
library(correlation)
library(see)
library(DHARMa)
library(phyr)
library(rr2)
library(MCMCglmm)
library(phytools)
library(emmeans)
library(bayesplot)
library(tidybayes)
library(broom.mixed)
library(ggridges)

# load phylogenetic data
phy=read.tree("C:/Users/gabri/Dropbox/postdocINECOL/bird phylogeny/AllBirdsHackett1.tre")

# load directory
setwd("C:/Users/gabri/Dropbox/postdocINECOL/dadosCompilados/workingfolder_GM")

# make a looping to run MCMC for all 1000 trees

list_posteriori = list()
list_intervals  = list()
list_summaries  = list()
list_sol        = list()
list_DIC        = list()
list_summaryGeral = list()

#for (i in 1:length(phy)){
for (i in 1:2){
  
  # load data metanetwork ####
  data = read.csv(file="birdtraits_spmetrics_phy_v7_abr_2022.csv")
  
  ###############################################################################
  # modelling
  
  # transform some variables
  
  data$PC1 = data$PC1 + 3.420449 +  0.001
  data$NichePosition = abs(data$NichePosition)
  
  # scale variables that will be used in the modelling and exclude NAs
  toscale = c("Mass", "Wing.Length" , "Hand.Wing.Index","Beak.Width", "Kipps.Distance",
              "NichePosition", "NicheBreadth","RangeSize_Meters",
              "ED" , "DR","Nwebs")
  
  dataM = as.data.frame(scale(data[,toscale],center = TRUE, scale = TRUE))
  dataM = cbind(data[,c("Scientific","PC1","PC2","Family1","Realm","Habitat","Trophic.Level","PC1_nobet","IUCN")],dataM)
  
  dataM$Habitat = as.factor(dataM$Habitat)
  dataM$Trophic.Level = as.factor(dataM$Trophic.Level)
  dataM$Family1 = as.factor(dataM$Family1)
  dataM$Realm = as.factor(dataM$Realm)
  dataM$dummy = factor(rep(1, length(dataM[,1])))
  dataM$IUCN = as.factor(dataM$IUCN)
  
  #dataM = na.exclude(dataM)
  
  summary(dataM$PC1)
  
# Run MCMCglmm models metanetwork ######
  
  #use only one tree
  tree = phy[[1]]
  tree$tip.label = gsub("_"," ",tree$tip.label)
  
  # prepare data #
  # remove species not in the tree #
  notintree = setdiff(dataM$Scientific,tree$tip.label)
  notindata = setdiff(tree$tip.label, dataM$Scientific)
  toexclude = c(notindata,notintree)
  
  #prune tree
  treeprune = drop.tip(tree,toexclude)
  
  #exclude species notintree from the dataset
  dataM = dataM[-which(dataM$Scientific %in% notintree),]
  
  # prepare the covariance matrix
  Ainv<-inverseA(treeprune)$Ainv
  
  # model without biogeographic realm
  prior<-list(R=list(V=1, nu=0.002),
              G=list(G=list(V=1, nu=0.002)))
  
  MCmodmeta = MCMCglmm(PC1 ~  RangeSize_Meters + Wing.Length + Mass + NichePosition + 
                         Hand.Wing.Index + Beak.Width + ED + NicheBreadth + DR, 
                       random=~Scientific,
                       prior = prior,
                       ginverse=list(Scientific=Ainv),
                       nitt=50000, burnin = 1000 ,thin = 25,
                       data=na.omit(dataM))
  
  list_posteriori[[i]] = posterior.mode(MCmodmeta$Sol)
  list_intervals[[i]] = HPDinterval(MCmodmeta$Sol)
  list_summaries[[i]]  = summary(MCmodmeta$Sol)
  list_sol[[i]]        = MCmodmeta$Sol
  list_DIC[[i]]        = DIC(MCmodmeta)
  list_summaryGeral[[i]] = summary(MCmodmeta)
  
} # fecha looping

den= ldply(list_posteriori)
den= melt(den)
den$variable=as.factor(den$variable)


a= list_sol
blist=list()
for(i in 1:length(a)){
  xx= a[[i]]
  xx=as.data.frame(xx)
  xx$tree = rep(i, nrow(xx))
  xx= melt(xx,id.vars=c("tree"))
  xx$variable = as.factor(xx$variable)
  xx$tree = as.factor(xx$tree)
  blist[[i]] = xx
}

c= ldply(blist)

  g = ggplot(subset(c,c$variable=="RangeSize_Meters"), aes(x=value,color=tree))+
  geom_density()+
  coord_flip()+
  scale_color_grey()
  g


ggplot(subset(den,variable!="(Intercept)"), aes(x=value,y=variable))+
  #ggplot(subset(den,variable=="RangeSize_Meters"), aes(x=value,y=variable))+
  geom_density_ridges(scale = 2,fill = "lightblue", alpha = 0.5)+
  theme(panel.border = element_rect(fill = NA, colour = "black"),
        panel.grid.minor = element_blank())+
  scale_x_continuous(limits = c(-1,2))+
  geom_vline(xintercept = 0,linetype="dashed")

# testes ######

par(mfrow=c(1,3))
#plot range size
coefsRS = as.data.frame(matrix(NA, ncol=2, nrow = length(list_summaryGeral)))
colnames(coefsRS) = c("a","b")
estRS=list()

plot(dataM$RangeSize_Meters,dataM$PC1,xlab="Range Size (m)",ylab="PC1", pch=19)
for (i in 1:length(list_summaryGeral)){
  coefsRS[i,] = list_summaryGeral[[i]][c(1:2),1]
  estRS[[i]] = coefsRS[i,1] + coefsRS[i,2]*dataM$RangeSize_Meters
  lines(dataM$RangeSize_Meters,estRS[[i]],  col="darkgray")
}

#plot beakwidth
coefsBW = as.data.frame(matrix(NA, ncol=2, nrow = length(list_summaryGeral)))
colnames(coefsBW) = c("a","b")
estBW=list()

plot(dataM$Beak.Width,dataM$PC1,xlab="Beak width",ylab="PC1", pch=19)
for (i in 1:length(list_summaryGeral)){
  coefsBW[i,] = list_summaryGeral[[i]][c(1,7),1]
  estBW[[i]] = coefsBW[i,1] + coefsBW[i,2]*dataM$Beak.Width
    lines(dataM$Beak.Width,estBW[[i]],  col="darkgray")
}

#plot Mass
coefsM = as.data.frame(matrix(NA, ncol=2, nrow = length(list_summaryGeral)))
colnames(coefsM) = c("a","b")
estM=list()

plot(dataM$Mass,dataM$PC1,xlab="Body mass",ylab="PC1", pch=19)
for (i in 1:length(list_summaryGeral)){
  coefsM[i,] = list_summaryGeral[[i]][c(1,4),1] # change the number of lines according to the variable
  estM[[i]] = coefsM[i,1] + coefsM[i,2]*dataM$Mass
  lines(dataM$Mass,estM[[i]],  col="darkgray")
}

################
  

# Variance cannot be zero, and therefore if the mean value is pushed up against zero your effect is not significant
# The larger the spread of the histogram, the less well estimated the distribution is.
hist(mcmc(MCmodmetahab$VCV)[,"Scientific"])

hist(mcmc(MCmodmeta$Sol)[,"RangeSize_Meters"])
abline(v=posterior.mode(mcmc(MCmodmeta$Sol))[2])

#####Run MCMCglmm with habitat #######################################################
# make a looping to run MCMC for all 1000 trees

list_posterioriH = list()
list_intervalsH  = list()
list_summariesH  = list()
list_solH        = list()
list_DICH        = list()
list_summaryGeralH = list()
list_vcvH       =list()


#for (i in 1:length(phy)){
  for (i in 1){
  
  # load data metanetwork #
  data = read.csv(file="birdtraits_spmetrics_phy_v7_abr_2022.csv")
  
  # modelling
  
  # transform some variables
  
  data$PC1 = data$PC1 + 3.420449 + 1
  data$NichePosition = abs(data$NichePosition)
  
  # scale variables that will be used in the modelling and exclude NAs
  toscale = c("Mass", "Wing.Length" , "Hand.Wing.Index","Beak.Width", "Kipps.Distance",
              "NichePosition", "NicheBreadth","RangeSize_Meters",
              "ED" , "DR","Nwebs")
  
  dataM = as.data.frame(scale(data[,toscale],center = TRUE, scale = TRUE))
  dataM = cbind(data[,c("Scientific","PC1","PC2","Family1","Realm","Habitat","Trophic.Level","PC1_nobet")],dataM)
  
  dataM$Habitat = as.factor(dataM$Habitat)
  dataM$Trophic.Level = as.factor(dataM$Trophic.Level)
  dataM$Family1 = as.factor(dataM$Family1)
  dataM$Realm = as.factor(dataM$Realm)
  dataM$dummy = factor(rep(1, length(dataM[,1])))
  
  #dataM = na.exclude(dataM)
  
  summary(dataM$PC1)
  
  # Run MCMCglmm models metanetwork #
  
  #use only one tree
  tree = phy[[i]]
  tree$tip.label = gsub("_"," ",tree$tip.label)
  
  # prepare data #
  # remove species not in the tree #
  notintree = setdiff(dataM$Scientific,tree$tip.label)
  notindata = setdiff(tree$tip.label, dataM$Scientific)
  toexclude = c(notindata,notintree)
  
  #prune tree
  treeprune = drop.tip(tree,toexclude)
  
  #exclude species notintree from the dataset
  dataM = dataM[-which(dataM$Scientific %in% notintree),]
  
  # prepare the covariance matrix
  Ainv<-inverseA(treeprune)$Ainv

# model wit biogeographic realm
prior<-list(R=list(V=1, nu=0.002),
            G=list(G1=list(V=1, nu=0.002),
                   G2=list(V=1, nu=0.001)))

MCmodmetahab = MCMCglmm(PC1 ~  RangeSize_Meters + Wing.Length + Mass + NichePosition + 
                       Hand.Wing.Index + Beak.Width + ED + NicheBreadth, 
                       random=~Scientific + Realm,
                       prior = prior,
                       ginverse=list(Scientific=Ainv),
                       nitt=100000, burnin = 5000 ,thin = 50,
                       data=na.omit(dataM),saveX = TRUE)

list_posterioriH[[i]] = posterior.mode(MCmodmetahab$Sol)
list_intervalsH[[i]] = HPDinterval(MCmodmetahab$Sol)
list_summariesH[[i]]  = summary(MCmodmetahab$Sol)
list_solH[[i]]        = MCmodmetahab$Sol
list_DICH[[i]]        = DIC(MCmodmetahab)
list_summaryGeralH[[i]] = summary(MCmodmetahab)
list_vcvH[[i]]        = MCmodmetahab$VCV



} # fecha looping
head(dataM)
MCmodmetahab$meta
summary(MCmodmetahab$VCV)
plot(MCmodmetahab$Sol)
plot(MCmodmetahab$VCV)
DIC(MCmodmetahab)
acf(MCmodmetahab$Sol[,1], lag.max = 20)

hist(MCmodmetahab$Sol[,2])
summary(MCmodmetahab)$solutions
MCmodmetahab$pMCMC

###testes #####

colnames(MCmodmetahab$Sol)
dim(MCmodmetahab$Sol)
dim(na.omit(dataM))
dim(MCmodmetahab$)

#####################################################


a=as.data.frame(summary(MCmodmeta)$solutions)
a$variable = rownames(a)

b=as.data.frame(summary(MCmodmetahab)$solutions)
b$variable = rownames(b)

#plot post.mean and Confidence intervals
ga = ggplot(subset(a,variable!="(Intercept)"), aes( y = factor(variable),
                                                        x = post.mean))+
  geom_pointrange(aes(xmin = `l-95% CI`, xmax = `u-95% CI`),size = 1,
                  position = position_dodge(width = 0.7),color="grey30") +
  theme_bw()+
  ylab("")+
  labs(title = "Metanetwork")+
  geom_vline(xintercept = 0,linetype="dashed")+
  theme(panel.border = element_rect(fill = NA, colour = "black"),
        panel.grid.minor = element_blank(),panel.grid.major = element_blank())+
  theme(axis.text.y = element_text(size = 14))+
  theme(axis.text.x =  element_text(size=14),axis.title.x = element_text(size=18))+
  labs(x="")
ga

gb = ggplot(subset(b,variable!="(Intercept)"), aes( y = factor(variable),
                                                    x = post.mean))+
  geom_pointrange(aes(xmin = `l-95% CI`, xmax = `u-95% CI`),size = 1,
                  position = position_dodge(width = 0.7),color="grey30") +
  theme_bw()+
  ylab("")+
  labs(title = "Metanetwork + Realms")+
  geom_vline(xintercept = 0,linetype="dashed")+
  theme(panel.border = element_rect(fill = NA, colour = "black"),
        panel.grid.minor = element_blank(),panel.grid.major = element_blank())+
  theme(axis.text.y = element_text(size = 14))+
  theme(axis.text.x =  element_text(size=14),axis.title.x = element_text(size=18))+
  labs(x="Posterior means and 95% credible intervals")+
  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())

ga + gb


DIC(MCmodmeta)
DIC(MCmodmetahab)

#############################################################################################
# Run MCMCGlmm at network level ####


list_posterioriN = list()
list_intervalsN  = list()
list_summariesN  = list()
list_solN        = list()
list_DICN        = list()
list_summaryGeralN = list()
list_vcvN      =list()

for (i in 1){

# load the data
indwebs = read.csv("database_indwebs_v7_abr_2022.csv")

# remove species not in the tree
notintree = setdiff(indwebs$Scientific,tree$tip.label)
notindata = setdiff(tree$tip.label, indwebs$Scientific)
toexclude = c(notindata,notintree)

#prune tree
treeprune2 = drop.tip(tree,toexclude)

#exclude species notintree from the dataset
indwebs = indwebs[-which(indwebs$Scientific %in% notintree),]

# transform some variables
summary(indwebs$PC1)
indwebs$PC1 = indwebs$PC1 + 4.947339 + 1

summary(indwebs$NichePosition)
indwebs$NichePosition = abs(indwebs$NichePosition)

# scale variables and remove NAs
toscaleind = c("Mass", "Wing.Length", "Hand.Wing.Index","Beak.Width",
               "NichePosition", "NicheBreadth","RangeSize_Meters",
               "ED" , "DR","Nwebs")

dataMI = as.data.frame(scale(indwebs[,toscaleind],center = TRUE, scale = TRUE))
dataMI = cbind(indwebs[,c("Scientific","PC1","PC2","Family1","Realm","Habitat","Trophic.Level")],dataMI)

dataMI$Habitat = as.factor(dataMI$Habitat)
dataMI$Trophic.Level = as.factor(dataMI$Trophic.Level)
dataMI$Family1 = as.factor(dataMI$Family1)
dataMI$Realm = as.factor(dataMI$Realm)
dataMI$dummy = factor(rep(1, length(dataMI[,1])))

dataMI = na.exclude(dataMI)


# Run MCMCglmm models  #

# prepare the covariance matrix
Ainv<-inverseA(treeprune2)$Ainv

# model wit biogeographic realm
prior<-list(R=list(V=1, nu=0.002),
            G=list(G1=list(V=1, nu=0.002),
                   G2=list(V=1, nu=0.002)))

MCmodmetaid = MCMCglmm(PC1 ~  RangeSize_Meters + Wing.Length + Mass + NichePosition + 
                          Hand.Wing.Index + Beak.Width + ED + NicheBreadth, 
                        random=~Scientific + Realm,
                        prior = prior,
                        ginverse=list(Scientific=Ainv),
                        nitt=100000, burnin = 50000 ,thin = 100,
                        data=na.omit(dataMI))


list_posterioriN[[i]] = posterior.mode(MCmodmetaid$Sol)
list_intervalsN[[i]] = HPDinterval(MCmodmetaid$Sol)
list_summariesN[[i]]  = summary(MCmodmetaid$Sol)
list_solN[[i]]        = MCmodmetaid$Sol
list_DICN[[i]]        = DIC(MCmodmetaid)
list_summaryGeralN[[i]] = summary(MCmodmetaid)
list_vcvN[[i]]        = MCmodmetaid$VCV

} # fecha looping





c=as.data.frame(summary(MCmodmetahabid)$solutions)
c$variable = rownames(c)

d=as.data.frame(summary(MCmodmetahabid)$solutions)
d$variable = rownames(d)

#plot post.mean and Confidence intervals
gc = ggplot(subset(c,variable!="(Intercept)"), aes( y = factor(variable),
                                                    x = post.mean))+
  geom_pointrange(aes(xmin = `l-95% CI`, xmax = `u-95% CI`),size = 1,
                  position = position_dodge(width = 0.7),color="grey30") +
  theme_bw()+
  ylab("")+
  labs(title = "Metanetwork")+
  geom_vline(xintercept = 0,linetype="dashed")+
  theme(panel.border = element_rect(fill = NA, colour = "black"),
        panel.grid.minor = element_blank(),panel.grid.major = element_blank())+
  theme(axis.text.y = element_text(size = 14))+
  theme(axis.text.x =  element_text(size=14),axis.title.x = element_text(size=18))+
  labs(x="Posterior means and 95% credible intervals")

gd = ggplot(subset(d,variable!="(Intercept)"), aes( y = factor(variable),
                                                    x = post.mean))+
  geom_pointrange(aes(xmin = `l-95% CI`, xmax = `u-95% CI`),size = 1,
                  position = position_dodge(width = 0.7),color="grey30") +
  theme_bw()+
  ylab("")+
  labs(title = "Individual Networks + Realms")+
  geom_vline(xintercept = 0,linetype="dashed")+
  theme(panel.border = element_rect(fill = NA, colour = "black"),
        panel.grid.minor = element_blank(),panel.grid.major = element_blank())+
  theme(axis.text.y = element_text(size = 14))+
  theme(axis.text.x =  element_text(size=14),axis.title.x = element_text(size=18))+
  labs(x="")+
  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())



DIC(MCmodmetahabid)
DIC(MCmodmetahabid)

# make a combined graph #####

ga + gb + gd




# the model below uses the att pedigree instead of the covariance matrix, #####
## but provides identical results ####

summary(dataMI$PC1)
Nwebsinfoind = dataMI[order(dataMI$PC1,decreasing = T),c("Nwebs","Scientific", "PC1")]
head(Nwebsinfoind)
summary(Nwebsinfo$PC1)





if(F){
  priorbla <- list(R = list(V=1, nu=0.002),
                   G = list(G1 = list(V=1, nu=0.002)))
  bla = dataM
  names(bla)[1] = "animal"
  MCmodmetabla = MCMCglmm(PC1 ~  RangeSize_Meters + Wing.Length + Mass + NichePosition + 
                            Hand.Wing.Index + Beak.Width + ED + NicheBreadth, 
                          random=~animal,
                          prior = priorbla,
                          pedigree = treeprune,
                          #ginverse=list(Scientific=Ainv),
                          nitt=5000, burnin = 10 ,thin = 30,
                          data=na.omit(bla))
}

#########################################################################################
# explore dataset characteristics #####
dataM

dataM[order(dataM$PC1,decreasing = T),c("PC1","Scientific","Realm","Family1")]
dataM[order(dataM$PC1,decreasing = T),c("PC1","Scientific","Habitat","Trophic.Level")]

dataMI[order(dataMI$PC1,decreasing = T),c("PC1","Scientific","Realm","Family1")]  
table(dataM$IUCN)
